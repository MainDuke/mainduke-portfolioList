연산자

1. 산술 연산자 : +  -  *  /(나누기)  %(나머지)

		++(1씩 증가)
		--(1씩 감소)

예>
	i--(후위연산) 나중에 연산됨.
	--i(전위연산) 먼저 연산됨.
	i++
	++i


단독으로 사용할때는 1증가, 1감소한다.
복합연산시에는 전위연산 후위연산이 의미가 있다.

예:
int a=5;
int b=++a + ++a;

ch03 Test01.java

2. 관계연산자
 > (초과)
 < (미만)
 <== (이상)
 >== (미만)
 == (같다)
 != (같지 않다.)

Test02

3. 논리연산자 

일반 논리연산자 ;

	&& (and)
	|| (or)
	! (not)

비트 논리연산자 (2진 연산): 0 , 1
	&(and)
	|(or)
	^(xor)
	~(not)

4. shift 연산자 ( bit 연산 )

<< : 좌 쉬프트 연산 ( 한비트씩 왼쪽으로 이동, 우측은 0으로 채움)
	x*2^n
>> : 우 쉬프트 연산( 한 비트씩 오른쪽으로 이동, 좌측은 sign로 채움)
	x/2^n

sign bit 는 	0이면 양수
		1이면 음수

>>> : 한비트씩 우로 이동, 좌측은 0 으로 채움.
	x/4^n

실습 Test03

5. boolean 연산자

예 boolean =

boolean b=true;
boolean b=false;

실습 Test04.java

6.대입 연산자


------------------------------------------------------------------------
대입 연산자		사용법			의미
------------------------------------------------------------------------
	=		a=10			a=10
	+=		a+=2			a=a+2
	=+		a-=2			a=a-2

	*=		a*=2			a=a*2
	/=		a/=2			a=a/2
	%=		a%=2			a=a%2

	<<=		a<<=2			a=a<<2
	>>=		a>>=2			a=a>>2

	|=		a|=2			a=a|2
	&=		a&=2			a=a&2
	^=		a^=2			a=a^2


7. 조건 연산자 ( 3항 연산자 )

(조건)?값1:값2

조건이 참이면 값1 을 처리.
조건이 거짓이면 값2을 처리한다.


===============================================================================================
160118 시작.
===============================================================================================

8. cast 연산자 ( 강제 형 변환)
	
	int a = (int)12.5; //12
	char ch= (char)65.7;// A
	char ch= (char)65;// A
===============================================================================================
* 
	==연산자 .......... 기본 데이터형에 적용할 경우 사용.

	equals()메서드 ....... 문자열 비교 할때 사용.

	equalsIgnoreCase()메서드 ..... 문자열 비교.(대.소문자 구분않고 비교한다.)
	
	instanceof ............ 객체비교 ( 예 : 객체 instanceof 클래스)
				왼쪽은 객체, 오른쪽은 클래스.	
				왼쪽 객체 변수가 오른쪽 클래스의 오브젝트(인스탄스)



실습(Test06)

//2016.01.18 일 수업시작, CH03_Test06 내용 문자열 비교 연산자.

class Test06
{
	public static void main( String [] args ) 
	{
		
		String str="hello";
		System.out.println(str.equals("hello"));//true
		System.out.println(str.equals("Hello"));//false
		System.out.println(str.equalsIgnoreCase("Hello"));//true
		//equalsIgnoreCase 는 대소문자 구분 하지 않는다.
		System.out.println("==========================first end");
		
		//질문? 수식연산자로 스트링을 비교 할수 있는가?
		System.out.println(str==("hello"));//true
		System.out.println(str==("Hello"));//true
		
		//된다?... JPad 버전 업의 효과인가??
		
		System.out.println("==========================second end");
		
		String str2=new String("hello");
		System.out.println(str=="hello");//true
		System.out.println(str==("Hello"));//false
		System.out.println(str==str2);//false
		
		
		System.out.println("==========================3th end");
		
		String s1="hello"; //일반함수처럼 사용.
		String s2="hello"; //일반 함수처럼 사용.
		System.out.println("s1=s2?"+(s1==s2));//true
		
		System.out.println("==========================4th end");
		
		
		String s3 = new String("hello"); //객체 생성.
		String s4 = new String("hello"); //객체 생성.
		
		System.out.println("s3=s4?"+(s3==s4));//false
		//Why? 객체가 다르면 == 은 메모리 주소를 참조비교 한다. 그러므로 false가 나온다.
		
		
		System.out.println("==========================5th end");
		
		System.out.println("s3.equals(s4)? : "+(s3.equals(s4)));//false
		//Why? 그러나, equals()메서드는 문자열 자체를 비교하므로 객체가 달라도 True 판정을 받는다.
		
		System.out.println("==========================6th end");
		System.out.println("---Instanceof---");
		
		Object ob=new Object(); //Object는 최상위 클래스이다.
		String str5=new String("abc");
		System.out.println(ob instanceof Object);//true
		System.out.println(str5 instanceof String);//true
		System.out.println(str5 instanceof Object);//true
		System.out.println(ob instanceof String);// false
		
		/*
		System.out.println(ob instanceof StringBuffer);// false
		아무 관계 없는 클래스는 비교 못함= 에러.
		 */
		
		
		
	}// end main
	
}
218 생성자

1. 클래스 이름하고 동일한 이름으로 기재한다.
2. 리턴타입이 없어야 한다.
3. (목적이 객체(필드) 초기화)
4. 인수를 갖는다. 
5. 오버로드가 가능하다. (여러개의 생성자 갖는다.)
6. 객체 생성시 호출된다.

*
this : 자신의 객체를 뜻한다.
this() : 자신의 클래스내의 생성자 호출. this는 생성자 내의 첫줄에 기재.

super : 상위 클래스 객체
*super(): 상위 클래스 내의 생성자 호출,
	super()는 생성자 내의 첫줄에 기재.

this()와 super() 동시에 사용 못한다.
this()와 super()는 생성자 안에서 첫줄에 기재해야한다.


*this() 계열 생성자 호출 구문은 첫줄에 기재해야한다.
===========================================================
생성자 예제
===========================================================
/*
 * Author: Administrator
 * Created: 2016년 1월 25일 월요일 오전 11:35:25
 * Modified: 2016년 1월 25일 월요일 오전 11:35:25
 */

//생성자 예시.

class Sung{
	String name;//null, 전역 변수 자동 초기화.
	int kor; //0
	
	//1.디폴트 생성자.
	public Sung(){//디폴트 생성자.
					//생성자를 넣지 않으면,
					//디폴트 생성자가 자동으로 생성 된다.
					//인자 있는 생성자가 있을때는,
					//디폴트 생성자는 생성되지 않는다.
	
				//name="";
				kor=0;
				System.out.println("디폴트 생성자 호출");
			}
					
	public Sung(String name, int kor){
		this.name=name;
		this.kor=kor;
		
		System.out.println("인자1 생성자 호출");
				
	}//인자가 있는 생성자.
	
	public Sung(int kor, String name){
		
		this.name=name;
		this.kor=kor;
		
		System.out.println("인자2 생성자 호출");
	}
	
	public void disp(){
		System.out.println(name+"---"+kor);
	}	
	
					
}//class end

class Test01_cons
{
	public static void main( String [] args ) 
	{
		Sung s1=new Sung();//디폴트 생성자.
		Sung s2= new Sung("홍길동", 12);
		Sung s3= new Sung(21, "송혜교");
		
		System.out.println();
		
		s1.disp(); // null 0
		s2.disp(); // 홍길동. 12
		s3.disp(); //  송혜교 , 21
	}// end main

}//class end.

===============================================================
221p
[이름] 가입자 정보 클래스

[데이터]==전역변수
이름
아이디
패스워드
전화번호
주소

생성자

[기능]==메서드
패스워드를 바꾼다
전화번호를 등록한다.
주소를 등록한다.

subinfor.java
ConstrExample222.java(main)
